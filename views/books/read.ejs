
<div class="top-bar">
    <button class="pageBtn" id="prev-page">
        <i class="fas fa-arrow-circle-left"></i>
    </button>

    <span class="page-info">
        Page <span id="page-num"></span> of <span id="page-count"></span>
    </span>
</div>

<canvas class="read-canvas" id="pdf-render"></canvas><br>
<div class="second-next">
<button class="pageBtn" id="next-page">
    <i class="fas fa-arrow-circle-right"></i>
</button>
</div>

<!-- <script src="https://unpkg.com/pdfjs-dist@4.0.269/build/pdf.mjs"></script> -->
<script type="module">
    import * as pdfjsLib from 'https://unpkg.com/pdfjs-dist@4.0.269/build/pdf.mjs';

    const url = '<%-book.pdfPath%>';
    
    let pdfDoc = null;
    let pageNum = 1;
    let pageIsRendering = false;
    let pageNumIsPending = null;
    
    const scale = 3;
    const canvas = document.querySelector('#pdf-render');
    const ctx = canvas.getContext('2d');
    
    // render the page
    const renderPage = num => {
        pageIsRendering = true;
    
        // Get page
        pdfDoc.getPage(num).then(page => {
            // Set scale
            const viewport = page.getViewport({ scale });
            canvas.height = viewport.height;
            canvas.width = viewport.width;
    
            const renderCtx = {
                canvasContext: ctx,
                viewport
            };
        
            page.render(renderCtx).promise.then(() => {
                pageIsRendering = false;
            
                if (pageNumIsPending !== null) {
                    renderPage(pageNumIsPending);
                    pageNumIsPending = null;
                }
            });
    
            // Output current page
            document.querySelector('#page-num').textContent = num;
        });
    };
    
    // Check for pages rendering
    const queueRenderPage = num => {
        if (pageIsRendering) {
            pageNumIsPending = num;
        } else {
            renderPage(num);
        }
    };
    
    // show Prev Page
    const showPrevPage = () => {
        if (pageNum <= 1) {
            return;
        }
        pageNum--;
        queueRenderPage(pageNum);
    };
    
    // show Next Page
    const showNextPage = () => {
        if (pageNum >= pdfDoc.numPages) {
            return;
        }
        pageNum++;
        queueRenderPage(pageNum);
    };
    
    // Get Document
    pdfjsLib.getDocument(url).promise.then(pdfDoc_ => {
        pdfDoc = pdfDoc_;
        
        document.querySelector('#page-count').textContent = pdfDoc.numPages;
    
        renderPage(pageNum);
    });

    if (!canvas.getContext) {
        canvas.innerHTML = "PDF Viewer not supported by browser";
    }
    
    // Button Events
    document.querySelector('#prev-page').addEventListener('click', showPrevPage);
    document.querySelector('#next-page').addEventListener('click', showNextPage);

    document.addEventListener('keydown', function(event) {
        if (event.key === 'ArrowRight') {
            showNextPage();
        } else if (event.key === 'ArrowLeft') {
            showPrevPage();
        }
    });
</script>
